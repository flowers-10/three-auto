import{_ as e,c as a,a1 as i,o as t}from"./chunks/framework.DiRI4YF-.js";const k=JSON.parse('{"title":"常用属性","description":"","frontmatter":{},"headers":[],"relativePath":"docs/three-instance.md","filePath":"zh/docs/three-instance.md","lastUpdated":1734340744000}'),n={name:"docs/three-instance.md"};function h(p,s,l,r,c,o){return t(),a("div",null,s[0]||(s[0]=[i(`<h1 id="常用属性" tabindex="-1">常用属性 <a class="header-anchor" href="#常用属性" aria-label="Permalink to &quot;常用属性&quot;">​</a></h1><p>ThreeAuto 应用实例<a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/ThreeInstance.ts" target="_blank" rel="noreferrer">ThreeInstance</a>,不能在单个容器上初始化多个 ThreeAuto 实例。</p><h2 id="instance" tabindex="-1">instance <a class="header-anchor" href="#instance" aria-label="Permalink to &quot;instance&quot;">​</a></h2><p><code>ThreeAuto</code>的构造函数可以接受两个参数</p><p><code>constructor</code></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLCanvasElement, config)</span></span></code></pre></div><ul><li><code>canvas</code></li></ul><p>实例容器，是一个具有高宽的 canvas 元素。可以不传入这时候会根据第二个参数中<code>config.id</code>来自动识别当前页面中的 dom 元素。</p><div class="danger custom-block"><p class="custom-block-title">错误</p><p>如果都没有，就会抛出错误 <code>canvas has already been initialized.</code></p></div><ul><li><code>config</code></li></ul><p>配置项参数。具体请见<a href="/three-auto/config/default">配置项手册</a>。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./src/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThreeAuto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>实例上还有许多 three.js 需要的属性和方法，我们可以通过实例直接访问它们。</p><h2 id="instance-scene" tabindex="-1">instance.scene <a class="header-anchor" href="#instance-scene" aria-label="Permalink to &quot;instance.scene&quot;">​</a></h2><p><code>THREE.Scene</code></p><p>Three.js 的<a href="https://threejs.org/docs/index.html?q=Sce#api/en/scenes/Scene" target="_blank" rel="noreferrer">Scene</a>类。</p><p>Scene 允许您设置 three.js 要渲染的内容和位置。这是您放置对象、灯光和相机的地方。</p><h2 id="instance-canvas" tabindex="-1">instance._canvas <a class="header-anchor" href="#instance-canvas" aria-label="Permalink to &quot;instance.\\_canvas&quot;">​</a></h2><p><code>HTMLCanvasElement</code></p><p>实例容器，是一个具有高宽的 canvas 元素，用户内部检查。</p><h2 id="instance-camera" tabindex="-1">instance._camera <a class="header-anchor" href="#instance-camera" aria-label="Permalink to &quot;instance.\\_camera&quot;">​</a></h2><p><code>THREE.Camera</code></p><p><code>ThreeAuto</code>内部封装<code>Camera</code>类生成的实例属性，用来生成 Three.js 的相机。</p><p>现在支持两种相机<a href="https://threejs.org/docs/index.html?q=camera#api/en/cameras/PerspectiveCamera" target="_blank" rel="noreferrer">PerspectiveCamera</a>和<a href="https://threejs.org/docs/index.html?q=camera#api/en/cameras/OrthographicCamera" target="_blank" rel="noreferrer">OrthographicCamera</a>，后续会开放更多相机类型。</p><p>可以通过配置项直接更改<code>Camera</code>生成后的属性。</p><p>具体请见配置项手册：<a href="/three-auto/config/default">camera</a>。</p><p>使用方法和 three.js 的 <code>camera</code> 属性一样：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance._camera.position.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="instance-renderer" tabindex="-1">instance._renderer <a class="header-anchor" href="#instance-renderer" aria-label="Permalink to &quot;instance.\\_renderer&quot;">​</a></h2><p><code>THREE.Renderer</code></p><p><code>ThreeAuto</code>内部封装<code>Renderer</code>类生成的实例属性，用来生成 Three.js 的渲染器。</p><p>现在只支持一种渲染器<a href="https://threejs.org/docs/index.html?q=render#api/en/renderers/WebGLRenderer" target="_blank" rel="noreferrer">WebGLRenderer</a>，后续会开放更多渲染器类型。</p><p>可以通过配置项直接更改<code>WebGLRenderer</code>生成后的属性。</p><p>具体请见配置项手册：<a href="/three-auto/config/default">renderer</a>。</p><p>使用方法和<code>three.js</code>的<code>renderer</code>属性一样：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance._renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setClearColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#ffffff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="instance-time" tabindex="-1">instance.time <a class="header-anchor" href="#instance-time" aria-label="Permalink to &quot;instance.time&quot;">​</a></h2><p><code>Time</code></p><p>由<code>ThreeAuto</code>内部封装<code>Time</code>类生成的实例属性，用来控住整个循环<code>loop</code>，核心是<code>requestAnimationFrame</code>的递归调用，来保证渲染器每一帧都能触发。</p><p>具体请见通用类：<a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/Time.ts" target="_blank" rel="noreferrer">Time</a>。</p><h2 id="instance-delta" tabindex="-1">instance.delta <a class="header-anchor" href="#instance-delta" aria-label="Permalink to &quot;instance.delta&quot;">​</a></h2><p><code>Number</code></p><p>每一帧触发时的间隔时间（毫秒）。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;每一帧触发时的间隔时间:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, instance.delta, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;毫秒&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-elapsedtime" tabindex="-1">instance.elapsedTime <a class="header-anchor" href="#instance-elapsedtime" aria-label="Permalink to &quot;instance.elapsedTime&quot;">​</a></h2><p><code>Number</code></p><p>已经用了的时间（秒）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;已经用了的时间&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, instance.elapsedTime, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;（秒）&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-lerpvalue" tabindex="-1">instance.lerpValue <a class="header-anchor" href="#instance-lerpvalue" aria-label="Permalink to &quot;instance.lerpValue&quot;">​</a></h2><p><code>Number</code></p><p>实验功能未更新...</p><h2 id="instance-sizes" tabindex="-1">instance.sizes <a class="header-anchor" href="#instance-sizes" aria-label="Permalink to &quot;instance.sizes&quot;">​</a></h2><p><code>Sizes</code></p><p>由<code>ThreeAuto</code>内部封装<code>Sizes</code>类生成的实例属性，用来监听容器尺寸变化，来实时改变渲染器的尺寸大小。</p><p>它可以通过全局配置项来选定监听的容器尺寸，默认监听 window 尺寸变化。</p><p>具体请见通用类：<a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/Sizes.ts" target="_blank" rel="noreferrer">Sizes</a>。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>可以更改配置项来选择监听父容器尺寸变化的模式具体见配置项手册<a href="/three-auto/config/default">size</a>。</p></div><h2 id="instance-width" tabindex="-1">instance.width <a class="header-anchor" href="#instance-width" aria-label="Permalink to &quot;instance.width&quot;">​</a></h2><p><code>Number</code></p><p>获得当前的容器宽度。</p><h2 id="instance-height" tabindex="-1">instance.height <a class="header-anchor" href="#instance-height" aria-label="Permalink to &quot;instance.height&quot;">​</a></h2><p><code>Number</code></p><p>获得当前的容器高度。</p><h2 id="instance-pixelratio" tabindex="-1">instance.pixelRatio <a class="header-anchor" href="#instance-pixelratio" aria-label="Permalink to &quot;instance.pixelRatio&quot;">​</a></h2><p><code>Number</code></p><p>获得当前的屏幕像素比。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance.pixelRatio); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-mousemove" tabindex="-1">instance.mousemove <a class="header-anchor" href="#instance-mousemove" aria-label="Permalink to &quot;instance.mousemove&quot;">​</a></h2><p><code>MouseMoveTracker</code></p><p><code>ThreeAuto</code>内部封装<code>MouseMoveTracker</code>类生成的实例属性，用来监听鼠标移动生成鼠标当前的屏幕坐标<code>（x,y）</code>，主要为射线检测服务。</p><p>具体请见通用类：<a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/Mousemove.ts" target="_blank" rel="noreferrer">MouseMoveTracker</a>。</p><h2 id="instance-eventoffset" tabindex="-1">instance.eventOffset <a class="header-anchor" href="#instance-eventoffset" aria-label="Permalink to &quot;instance.eventOffset&quot;">​</a></h2><p><code>THREE.Vector2</code></p><p>返回当前的屏幕坐标（像素 px）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMousemove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance.eventOffset); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-mouse" tabindex="-1">instance.mouse <a class="header-anchor" href="#instance-mouse" aria-label="Permalink to &quot;instance.mouse&quot;">​</a></h2><p><code>THREE.Vector2</code></p><p>返回当前的归一化坐标（范围 0.0~1.0）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMousemove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance.mouse); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,79)]))}const E=e(n,[["render",h]]);export{k as __pageData,E as default};
