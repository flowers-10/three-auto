import{W as J,C as K}from"./chunks/three-auto.es.BY6cCJL5.js";import{D as Q,H as f,F as M,b as S,L as Z,c as V,a as L,S as z,V as ee,M as j,d as ae,E as te,e as se,T as ie}from"./chunks/three.module.kRIKED9S.js";import{d as ne,v as re,c as oe,a1 as U,j as N,o as le}from"./chunks/framework.DiRI4YF-.js";class ce extends Q{constructor(d){super(d),this.type=f}parse(d){const i=function(e,t){switch(e){case 1:throw new Error("THREE.RGBELoader: Read Error: "+(t||""));case 2:throw new Error("THREE.RGBELoader: Write Error: "+(t||""));case 3:throw new Error("THREE.RGBELoader: Bad File Format: "+(t||""));default:case 4:throw new Error("THREE.RGBELoader: Memory Error: "+(t||""))}},G=`
`,I=function(e,t,n){t=t||1024;let c=e.pos,l=-1,a=0,p="",s=String.fromCharCode.apply(null,new Uint16Array(e.subarray(c,c+128)));for(;0>(l=s.indexOf(G))&&a<t&&c<e.byteLength;)p+=s,a+=s.length,c+=128,s+=String.fromCharCode.apply(null,new Uint16Array(e.subarray(c,c+128)));return-1<l?(e.pos+=a+l+1,p+s.slice(0,l)):!1},W=function(e){const t=/^#\?(\S+)/,n=/^\s*GAMMA\s*=\s*(\d+(\.\d+)?)\s*$/,o=/^\s*EXPOSURE\s*=\s*(\d+(\.\d+)?)\s*$/,c=/^\s*FORMAT=(\S+)\s*$/,l=/^\s*\-Y\s+(\d+)\s+\+X\s+(\d+)\s*$/,a={valid:0,string:"",comments:"",programtype:"RGBE",format:"",gamma:1,exposure:1,width:0,height:0};let p,s;for((e.pos>=e.byteLength||!(p=I(e)))&&i(1,"no header found"),(s=p.match(t))||i(3,"bad initial token"),a.valid|=1,a.programtype=s[1],a.string+=p+`
`;p=I(e),p!==!1;){if(a.string+=p+`
`,p.charAt(0)==="#"){a.comments+=p+`
`;continue}if((s=p.match(n))&&(a.gamma=parseFloat(s[1])),(s=p.match(o))&&(a.exposure=parseFloat(s[1])),(s=p.match(c))&&(a.valid|=2,a.format=s[1]),(s=p.match(l))&&(a.valid|=4,a.height=parseInt(s[1],10),a.width=parseInt(s[2],10)),a.valid&2&&a.valid&4)break}return a.valid&2||i(3,"missing format specifier"),a.valid&4||i(3,"missing image size specifier"),a},O=function(e,t,n){const o=t;if(o<8||o>32767||e[0]!==2||e[1]!==2||e[2]&128)return new Uint8Array(e);o!==(e[2]<<8|e[3])&&i(3,"wrong scanline width");const c=new Uint8Array(4*t*n);c.length||i(4,"unable to allocate buffer space");let l=0,a=0;const p=4*o,s=new Uint8Array(4),w=new Uint8Array(p);let H=n;for(;H>0&&a<e.byteLength;){a+4>e.byteLength&&i(1),s[0]=e[a++],s[1]=e[a++],s[2]=e[a++],s[3]=e[a++],(s[0]!=2||s[1]!=2||(s[2]<<8|s[3])!=o)&&i(3,"bad rgbe scanline format");let R=0,E;for(;R<p&&a<e.byteLength;){E=e[a++];const g=E>128;if(g&&(E-=128),(E===0||R+E>p)&&i(3,"bad scanline data"),g){const u=e[a++];for(let P=0;P<E;P++)w[R++]=u}else w.set(e.subarray(a,a+E),R),R+=E,a+=E}const X=o;for(let g=0;g<X;g++){let u=0;c[l]=w[g+u],u+=o,c[l+1]=w[g+u],u+=o,c[l+2]=w[g+u],u+=o,c[l+3]=w[g+u],l+=4}H--}return c},Y=function(e,t,n,o){const c=e[t+3],l=Math.pow(2,c-128)/255;n[o+0]=e[t+0]*l,n[o+1]=e[t+1]*l,n[o+2]=e[t+2]*l,n[o+3]=1},$=function(e,t,n,o){const c=e[t+3],l=Math.pow(2,c-128)/255;n[o+0]=S.toHalfFloat(Math.min(e[t+0]*l,65504)),n[o+1]=S.toHalfFloat(Math.min(e[t+1]*l,65504)),n[o+2]=S.toHalfFloat(Math.min(e[t+2]*l,65504)),n[o+3]=S.toHalfFloat(1)},F=new Uint8Array(d);F.pos=0;const v=W(F),x=v.width,q=v.height,C=O(F.subarray(F.pos),x,q);let T,A,b;switch(this.type){case M:b=C.length/4;const e=new Float32Array(b*4);for(let n=0;n<b;n++)Y(C,n*4,e,n*4);T=e,A=M;break;case f:b=C.length/4;const t=new Uint16Array(b*4);for(let n=0;n<b;n++)$(C,n*4,t,n*4);T=t,A=f;break;default:throw new Error("THREE.RGBELoader: Unsupported type: "+this.type)}return{width:x,height:q,data:T,header:v.string,gamma:v.gamma,exposure:v.exposure,type:A}}setDataType(d){return this.type=d,this}load(d,m,r,k){function y(i,h){switch(i.type){case M:case f:i.colorSpace=Z,i.minFilter=V,i.magFilter=V,i.generateMipmaps=!1,i.flipY=!0;break}m&&m(i,h)}return super.load(d,y,r,k)}}class pe extends L{constructor(d,m,r,k=128){if(m<=0||r<=0||k<=0)throw new Error("GroundedSkybox height, radius, and resolution must be positive.");const y=new z(r,2*k,k);y.scale(1,1,-1);const i=y.getAttribute("position"),h=new ee;for(let _=0;_<i.count;++_)if(h.fromBufferAttribute(i,_),h.y<0){const B=-m*3/2,G=h.y<B?-m/h.y:1-h.y*h.y/(3*B*B);h.multiplyScalar(G),h.toArray(i.array,3*_)}i.needsUpdate=!0,super(y,new j({map:d,depthWrite:!1}))}}const Ee=JSON.parse('{"title":"环境贴图 (Environment)","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/components/environment.md","filePath":"zh/docs/components/environment.md","lastUpdated":1744684722000}'),he={name:"docs/components/environment.md"},ge=ne({...he,setup(D){const d=()=>{console.log(111)};return re(()=>{const m=new ce,r=new J(void 0,{size:{type:"parent"}});m.load("/three-auto/env/rustig_koppie_puresky_1k.hdr",h=>{h.colorSpace=ae,h.mapping=te,r.scene.background=h;const _=new pe(h,15,70);_.scale.setScalar(50),r.scene.add(_)});const k=new K(r);console.log(k.cubeCamera);const y=new L(new z(4,32,16),new se({roughness:0,metalness:1,color:11184810})),i=new L(new ie(12,.5),new j({color:"#fff"}));r.scene.add(y),r.scene.add(i),r._camera.position.set(20,20,20),r._renderer.setClearColor("#000"),r.time.on("tick",()=>{i.rotation.x=Math.sin(r.elapsedTime)*2,k.update()})}),(m,r)=>(le(),oe("div",null,[r[1]||(r[1]=U('<h1 id="环境贴图-environment" tabindex="-1">环境贴图 (Environment) <a class="header-anchor" href="#环境贴图-environment" aria-label="Permalink to &quot;环境贴图 (Environment)&quot;">​</a></h1><p><code>Environment</code> 类用于在 Three.js 场景中创建和管理环境贴图。它通过使用 <code>THREE.CubeCamera</code> 来生成动态环境贴图，并将其应用到场景中，通常用于反射效果和全局环境光照。</p><p>该类继承自 <code>BaseThree</code>，并通过一个 <code>ThreeInstance</code> 实例初始化。环境贴图是通过一个立方体相机 (<code>THREE.CubeCamera</code>) 生成的，该相机会渲染场景的六个面来生成环境贴图。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>环境贴图的图像可以用作背景，并且直接在对象上用作反射和照明。以非常逼真的方式照亮整个场景。</p></div>',4)),N("div",{onDblclick:d,style:{width:"100%",height:"400px",position:"relative","border-radius":"12px",overflow:"hidden"}},r[0]||(r[0]=[N("canvas",{id:"_scene"},null,-1)]),32),r[2]||(r[2]=U(`<div class="tip custom-block"><p class="custom-block-title">注意</p><p>点击图片跳转案例！ ⬆️</p></div><h2 id="构造函数-constructor" tabindex="-1">构造函数（Constructor） <a class="header-anchor" href="#构造函数-constructor" aria-label="Permalink to &quot;构造函数（Constructor）&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance: ThreeInstance)</span></span></code></pre></div><p>此构造函数创建一个新的Environment。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><strong>instance</strong> (<code>ThreeInstance</code>):一个 <code>ThreeInstance</code> 对象，包含了 Three.js 渲染器、场景等基本设置。</li></ul><h2 id="方法-methods" tabindex="-1">方法（Methods） <a class="header-anchor" href="#方法-methods" aria-label="Permalink to &quot;方法（Methods）&quot;">​</a></h2><h3 id="update-void" tabindex="-1">update() :void <a class="header-anchor" href="#update-void" aria-label="Permalink to &quot;update() :void&quot;">​</a></h3><p>更新立方体相机以重新渲染环境纹理。这个方法应当在每一帧调用以保持环境映射的实时性。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="属性-attribute" tabindex="-1">属性（attribute） <a class="header-anchor" href="#属性-attribute" aria-label="Permalink to &quot;属性（attribute）&quot;">​</a></h2><h3 id="cubecamera" tabindex="-1">cubeCamera <a class="header-anchor" href="#cubecamera" aria-label="Permalink to &quot;cubeCamera&quot;">​</a></h3><p><code>THREE.CubeCamera</code> 实例，用于渲染场景的六个面并生成环境贴图。 访问当前的<code>cubeCamera</code>相机。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env.cubeCamera);</span></span></code></pre></div>`,14))]))}});export{Ee as __pageData,ge as default};
