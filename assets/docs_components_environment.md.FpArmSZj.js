import{_ as e,c as s,a1 as i,o as t}from"./chunks/framework.R2dtW3-2.js";const k=JSON.parse('{"title":"环境贴图 (Environment)","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/components/environment.md","filePath":"zh/docs/components/environment.md","lastUpdated":1734337130000}'),n={name:"docs/components/environment.md"};function o(r,a,h,l,p,c){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="环境贴图-environment" tabindex="-1">环境贴图 (Environment) <a class="header-anchor" href="#环境贴图-environment" aria-label="Permalink to &quot;环境贴图 (Environment)&quot;">​</a></h1><p><code>Environment</code> 类用于在 Three.js 场景中创建和管理环境贴图。它通过使用 <code>THREE.CubeCamera</code> 来生成动态环境贴图，并将其应用到场景中，通常用于反射效果和全局环境光照。</p><p>该类继承自 <code>BaseThree</code>，并通过一个 <code>ThreeInstance</code> 实例初始化。环境贴图是通过一个立方体相机 (<code>THREE.CubeCamera</code>) 生成的，该相机会渲染场景的六个面来生成环境贴图。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>环境贴图的图像可以用作背景，并且直接在对象上用作反射和照明。以非常逼真的方式照亮整个场景。</p></div><p><a href="https://github.com/flowers-10/three-auto/blob/main/packages/examples/src/environment.ts" target="_blank" rel="noreferrer"><img src="https://img.picgo.net/2024/11/07/environment854deaf1420fe80e.gif" alt="环境贴图" loading="lazy"></a></p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>点击图片跳转案例！ ⬆️</p></div><h2 id="构造函数-constructor" tabindex="-1">构造函数（Constructor） <a class="header-anchor" href="#构造函数-constructor" aria-label="Permalink to &quot;构造函数（Constructor）&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance: ThreeInstance)</span></span></code></pre></div><p>此构造函数创建一个新的Environment。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><strong>instance</strong> (<code>ThreeInstance</code>):一个 <code>ThreeInstance</code> 对象，包含了 Three.js 渲染器、场景等基本设置。</li></ul><h2 id="方法-methods" tabindex="-1">方法（Methods） <a class="header-anchor" href="#方法-methods" aria-label="Permalink to &quot;方法（Methods）&quot;">​</a></h2><h3 id="update-void" tabindex="-1">update() :void <a class="header-anchor" href="#update-void" aria-label="Permalink to &quot;update() :void&quot;">​</a></h3><p>更新立方体相机以重新渲染环境纹理。这个方法应当在每一帧调用以保持环境映射的实时性。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="属性-attribute" tabindex="-1">属性（attribute） <a class="header-anchor" href="#属性-attribute" aria-label="Permalink to &quot;属性（attribute）&quot;">​</a></h2><h3 id="cubecamera" tabindex="-1">cubeCamera <a class="header-anchor" href="#cubecamera" aria-label="Permalink to &quot;cubeCamera&quot;">​</a></h3><p><code>THREE.CubeCamera</code> 实例，用于渲染场景的六个面并生成环境贴图。 访问当前的<code>cubeCamera</code>相机。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env.cubeCamera);</span></span></code></pre></div>`,19)]))}const u=e(n,[["render",o]]);export{k as __pageData,u as default};
