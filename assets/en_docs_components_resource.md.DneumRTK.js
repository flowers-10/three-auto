import{_ as a,c as e,a1 as i,o as t}from"./chunks/framework.DiRI4YF-.js";const k=JSON.parse('{"title":"Resources and Loaders","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"en/docs/components/resource.md","filePath":"en/docs/components/resource.md","lastUpdated":1756280400000}'),o={name:"en/docs/components/resource.md"};function n(r,s,l,d,h,p){return t(),e("div",null,s[0]||(s[0]=[i(`<h1 id="resources-and-loaders" tabindex="-1">Resources and Loaders <a class="header-anchor" href="#resources-and-loaders" aria-label="Permalink to &quot;Resources and Loaders&quot;">​</a></h1><p>The resource manager has built-in loader components, so we introduce them together.</p><p><a href="https://github.com/flowers-10/three-auto/blob/main/packages/examples/src/shadow.ts" target="_blank" rel="noreferrer"><img src="https://img.picgo.net/2024/11/07/tutieshi_640x488_4s-2cca6985d59e6169c.gif" alt="Resources and Loaders" loading="lazy"></a></p><h2 id="resource-manager-resources" tabindex="-1">Resource Manager (Resources) <a class="header-anchor" href="#resource-manager-resources" aria-label="Permalink to &quot;Resource Manager (Resources)&quot;">​</a></h2><p>The <code>Resources</code> class is used to manage and load various resources in Three.js applications, such as models, textures, fonts, audio, etc. It inherits from the <code>EventEmitter</code> class and uses multiple loaders (such as <code>GLTFLoader</code>, <code>OBJLoader</code>, <code>TextureLoader</code>, etc.) to handle different types of resources. This class also supports custom loading progress bars (<code>Loading</code>) and triggers a <code>ready</code> event when all resources are loaded.</p><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sources: SourcesItems[], loadingManager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoadingType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.LoadingManager)</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><strong>sources</strong> (<code>SourcesItems[]</code>): List of resources to load.</li><li><strong>loadingManager</strong> (<code>LoadingType | THREE.LoadingManager</code>, optional): Custom loading manager or loading style, defaults to <code>undefined</code>.</li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><h4 id="get-getloaded-boolean" tabindex="-1"><code>get getLoaded(): boolean</code> <a class="header-anchor" href="#get-getloaded-boolean" aria-label="Permalink to &quot;\`get getLoaded(): boolean\`&quot;">​</a></h4><p><strong>Return Value</strong></p><ul><li><strong>getLoaded</strong> (<code>boolean</code>): Whether all resources have been loaded.</li></ul><p><strong>Functionality</strong></p><ul><li>Returns whether <code>loaded</code> equals <code>toLoad</code>.</li></ul><h4 id="get-getprogress-number" tabindex="-1"><code>get getProgress(): number</code> <a class="header-anchor" href="#get-getprogress-number" aria-label="Permalink to &quot;\`get getProgress(): number\`&quot;">​</a></h4><p><strong>Return Value</strong></p><ul><li><strong>getProgress</strong> (<code>number</code>): Loading progress, range <code>[0, 1]</code>.</li></ul><p><strong>Functionality</strong></p><ul><li>Calculates and returns the current loading progress.</li></ul><h3 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;three-auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> THREE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThreeAuto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;svg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TEXTURE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./ThreeJs.svg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  show: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span></code></pre></div><h2 id="loader-loading" tabindex="-1">Loader (Loading) <a class="header-anchor" href="#loader-loading" aria-label="Permalink to &quot;Loader (Loading)&quot;">​</a></h2><p>The <code>CustomLoading</code> class is used to create and manage custom loading progress bars in Three.js applications. It depends on <code>THREE.LoadingManager</code> to handle resource loading and uses GSAP to achieve smooth animation effects. This class also supports multiple loading styles and can select different loading styles through configuration.</p><h3 id="constructor-1" tabindex="-1">Constructor <a class="header-anchor" href="#constructor-1" aria-label="Permalink to &quot;Constructor&quot;">​</a></h3><p><strong><code>CustomLoading(type: LoadingType)</code></strong></p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><strong>type</strong> (<code>LoadingType</code>): Type of loading style, defaults to <code>&quot;default&quot;</code>.</li></ul><p><strong>Functionality</strong></p><ul><li>Calls the <code>createBar</code> method to create a loading progress bar based on the provided type.</li><li>Initializes DOM elements.</li><li>Creates a <code>THREE.LoadingManager</code> instance and binds callbacks for loading completion and progress updates.</li><li>Sets a timeout function that automatically calls the <code>loadedBar</code> method after 30 seconds.</li></ul><h3 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><h4 id="createbar-type" tabindex="-1">createBar(type) <a class="header-anchor" href="#createbar-type" aria-label="Permalink to &quot;createBar(type)&quot;">​</a></h4><ul><li><strong>type</strong> (<code>LoadingType</code>): Type of loading style, defaults to <code>&quot;default&quot;</code>.</li></ul><p>Uses the <code>htmlRender</code> method to render the loading node to <code>document.body</code>.</p><h4 id="loadedbar" tabindex="-1">loadedBar() <a class="header-anchor" href="#loadedbar" aria-label="Permalink to &quot;loadedBar()&quot;">​</a></h4><p>Called when all resources are loaded. Uses GSAP to set fade-out animation for the loading progress bar and removes the loading progress bar after the animation completes. Sets scale animation for the loading progress bar.</p><h4 id="progressbar-type-loaded-total" tabindex="-1">progressBar(type, loaded, total) <a class="header-anchor" href="#progressbar-type-loaded-total" aria-label="Permalink to &quot;progressBar(type, loaded, total)&quot;">​</a></h4><ul><li><strong>type</strong> (<code>LoadingType</code>): Type of loading style, defaults to <code>&quot;default&quot;</code>.</li><li><strong>loaded</strong> (<code>number</code>): Number of loaded resources.</li><li><strong>total</strong> (<code>number</code>): Total number of resources.</li></ul><p>Calculates loading progress. Updates the percentage text of the loading progress bar. If the loading style is <code>&quot;default&quot;</code>, updates the scale ratio of the loading progress bar.</p><h4 id="dispose" tabindex="-1"><code>dispose()</code> <a class="header-anchor" href="#dispose" aria-label="Permalink to &quot;\`dispose()\`&quot;">​</a></h4><p>Removes existing loading progress bar DOM elements.</p><h3 id="usage-example-1" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example-1" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;three-auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThreeAuto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;circle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,43)]))}const g=a(o,[["render",n]]);export{k as __pageData,g as default};
