import{_ as a,c as s,a1 as i,o as t}from"./chunks/framework.DiRI4YF-.js";const k=JSON.parse('{"title":"Common Properties","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/three-instance.md","filePath":"en/docs/three-instance.md","lastUpdated":1756280400000}'),n={name:"en/docs/three-instance.md"};function r(h,e,p,o,l,c){return t(),s("div",null,e[0]||(e[0]=[i(`<h1 id="common-properties" tabindex="-1">Common Properties <a class="header-anchor" href="#common-properties" aria-label="Permalink to &quot;Common Properties&quot;">​</a></h1><p>ThreeAuto application instance <a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/ThreeInstance.ts" target="_blank" rel="noreferrer">ThreeInstance</a>, cannot initialize multiple ThreeAuto instances on a single container.</p><h2 id="instance" tabindex="-1">instance <a class="header-anchor" href="#instance" aria-label="Permalink to &quot;instance&quot;">​</a></h2><p>The <code>ThreeAuto</code> constructor can accept two parameters</p><p><code>constructor</code></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLCanvasElement, config)</span></span></code></pre></div><ul><li><code>canvas</code></li></ul><p>Instance container, which is a canvas element with width and height. You can omit this parameter, and it will automatically identify the DOM element in the current page based on <code>config.id</code> in the second parameter. ::: danger Error If neither is provided, an error <code>canvas has already been initialized.</code> will be thrown :::</p><ul><li><code>config</code></li></ul><p>Configuration parameter. For details, please see <a href="/three-auto/en/config/default">Configuration Manual</a>.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./src/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThreeAuto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>The instance also has many properties and methods required by three.js, which we can access directly through the instance.</p><h2 id="instance-scene" tabindex="-1">instance.scene <a class="header-anchor" href="#instance-scene" aria-label="Permalink to &quot;instance.scene&quot;">​</a></h2><p><code>THREE.Scene</code></p><p>Three.js <a href="https://threejs.org/docs/index.html?q=Sce#api/en/scenes/Scene" target="_blank" rel="noreferrer">Scene</a> class.</p><p>Scene allows you to set up what and where three.js is to render. This is where you place objects, lights and cameras.</p><h2 id="instance-canvas" tabindex="-1">instance._canvas <a class="header-anchor" href="#instance-canvas" aria-label="Permalink to &quot;instance._canvas&quot;">​</a></h2><p><code>HTMLCanvasElement</code></p><p>Instance container, which is a canvas element with width and height, used for internal inspection.</p><h2 id="instance-camera" tabindex="-1">instance._camera <a class="header-anchor" href="#instance-camera" aria-label="Permalink to &quot;instance._camera&quot;">​</a></h2><p><code>THREE.Camera</code></p><p>Instance property generated by the <code>Camera</code> class encapsulated internally by <code>ThreeAuto</code>, used to generate Three.js cameras.</p><p>Currently supports two cameras <a href="https://threejs.org/docs/index.html?q=camera#api/en/cameras/PerspectiveCamera" target="_blank" rel="noreferrer">PerspectiveCamera</a> and <a href="https://threejs.org/docs/index.html?q=camera#api/en/cameras/OrthographicCamera" target="_blank" rel="noreferrer">OrthographicCamera</a>, more camera types will be available in the future.</p><p>You can directly change the properties of <code>Camera</code> after generation through configuration options.</p><p>For details, please see the configuration manual: <a href="/three-auto/en/config/camera">camera</a>.</p><p>Usage is the same as three.js <code>camera</code> property:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance._camera.position.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="instance-renderer" tabindex="-1">instance._renderer <a class="header-anchor" href="#instance-renderer" aria-label="Permalink to &quot;instance._renderer&quot;">​</a></h2><p><code>THREE.Renderer</code></p><p>Instance property generated by the <code>Renderer</code> class encapsulated internally by <code>ThreeAuto</code>, used to generate Three.js renderers.</p><p>Currently only supports one renderer <a href="https://threejs.org/docs/index.html?q=render#api/en/renderers/WebGLRenderer" target="_blank" rel="noreferrer">WebGLRenderer</a>, more renderer types will be available in the future.</p><p>You can directly change the properties of <code>WebGLRenderer</code> after generation through configuration options.</p><p>For details, please see the configuration manual: <a href="/three-auto/en/config/renderer">renderer</a>.</p><p>Usage is the same as <code>three.js</code> <code>renderer</code> property:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance._renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setClearColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#ffffff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="instance-time" tabindex="-1">instance.time <a class="header-anchor" href="#instance-time" aria-label="Permalink to &quot;instance.time&quot;">​</a></h2><p><code>Time</code></p><p>Instance property generated by the <code>Time</code> class encapsulated internally by <code>ThreeAuto</code>, used to control the entire <code>loop</code>, with the core being recursive calls to <code>requestAnimationFrame</code> to ensure the renderer can trigger every frame.</p><p>For details, please see the common class: <a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/Time.ts" target="_blank" rel="noreferrer">Time</a>.</p><h2 id="instance-delta" tabindex="-1">instance.delta <a class="header-anchor" href="#instance-delta" aria-label="Permalink to &quot;instance.delta&quot;">​</a></h2><p><code>Number</code></p><p>Interval time (milliseconds) when each frame is triggered.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Interval time when each frame is triggered:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, instance.delta, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;milliseconds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-elapsedtime" tabindex="-1">instance.elapsedTime <a class="header-anchor" href="#instance-elapsedtime" aria-label="Permalink to &quot;instance.elapsedTime&quot;">​</a></h2><p><code>Number</code></p><p>Elapsed time (seconds)</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Elapsed time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, instance.elapsedTime, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(seconds)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-lerpvalue" tabindex="-1">instance.lerpValue <a class="header-anchor" href="#instance-lerpvalue" aria-label="Permalink to &quot;instance.lerpValue&quot;">​</a></h2><p><code>Number</code></p><p>Experimental feature not updated...</p><h2 id="instance-sizes" tabindex="-1">instance.sizes <a class="header-anchor" href="#instance-sizes" aria-label="Permalink to &quot;instance.sizes&quot;">​</a></h2><p><code>Sizes</code></p><p>Instance property generated by the <code>Sizes</code> class encapsulated internally by <code>ThreeAuto</code>, used to monitor container size changes and real-time change the renderer size.</p><p>It can select the container size to monitor through global configuration options, defaulting to monitoring window size changes.</p><p>For details, please see the common class: <a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/Sizes.ts" target="_blank" rel="noreferrer">Sizes</a>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>You can change configuration options to select the mode for monitoring parent container size changes. For details, see the configuration manual <a href="/three-auto/en/config/size">size</a>.</p></div><h2 id="instance-width" tabindex="-1">instance.width <a class="header-anchor" href="#instance-width" aria-label="Permalink to &quot;instance.width&quot;">​</a></h2><p><code>Number</code></p><p>Get the current container width.</p><h2 id="instance-height" tabindex="-1">instance.height <a class="header-anchor" href="#instance-height" aria-label="Permalink to &quot;instance.height&quot;">​</a></h2><p><code>Number</code></p><p>Get the current container height.</p><h2 id="instance-pixelratio" tabindex="-1">instance.pixelRatio <a class="header-anchor" href="#instance-pixelratio" aria-label="Permalink to &quot;instance.pixelRatio&quot;">​</a></h2><p><code>Number</code></p><p>Get the current screen pixel ratio.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance.pixelRatio); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-mousemove" tabindex="-1">instance.mousemove <a class="header-anchor" href="#instance-mousemove" aria-label="Permalink to &quot;instance.mousemove&quot;">​</a></h2><p><code>MouseMoveTracker</code></p><p>Instance property generated by the <code>MouseMoveTracker</code> class encapsulated internally by <code>ThreeAuto</code>, used to monitor mouse movement and generate current screen coordinates <code>(x,y)</code> of the mouse, mainly serving ray detection.</p><p>For details, please see the common class: <a href="https://github.com/flowers-10/three-auto/blob/main/packages/core/src/base/Mousemove.ts" target="_blank" rel="noreferrer">MouseMoveTracker</a>.</p><h2 id="instance-eventoffset" tabindex="-1">instance.eventOffset <a class="header-anchor" href="#instance-eventoffset" aria-label="Permalink to &quot;instance.eventOffset&quot;">​</a></h2><p><code>THREE.Vector2</code></p><p>Returns current screen coordinates (pixels px)</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMousemove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance.eventOffset); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="instance-mouse" tabindex="-1">instance.mouse <a class="header-anchor" href="#instance-mouse" aria-label="Permalink to &quot;instance.mouse&quot;">​</a></h2><p><code>THREE.Vector2</code></p><p>Returns current normalized coordinates (range 0.0~1.0)</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMousemove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance.mouse); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,78)]))}const g=a(n,[["render",r]]);export{k as __pageData,g as default};
