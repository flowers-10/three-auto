import{_ as a,c as i,a1 as e,o as t}from"./chunks/framework.R2dtW3-2.js";const c=JSON.parse('{"title":"资源和加载器","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/components/resource.md","filePath":"zh/docs/components/resource.md","lastUpdated":1734337130000}'),n={name:"docs/components/resource.md"};function o(l,s,h,r,d,p){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="资源和加载器" tabindex="-1">资源和加载器 <a class="header-anchor" href="#资源和加载器" aria-label="Permalink to &quot;资源和加载器&quot;">​</a></h1><p>资源管理器内置了加载器组件，所以我们一起介绍它们。</p><p><a href="https://github.com/flowers-10/three-auto/blob/main/packages/examples/src/shadow.ts" target="_blank" rel="noreferrer"><img src="https://img.picgo.net/2024/11/07/tutieshi_640x488_4s-2cca6985d59e6169c.gif" alt="资源和加载器" loading="lazy"></a></p><h2 id="资源管理器-resources" tabindex="-1">资源管理器（Resources） <a class="header-anchor" href="#资源管理器-resources" aria-label="Permalink to &quot;资源管理器（Resources）&quot;">​</a></h2><p><code>Resources</code> 类用于管理和加载 Three.js 应用程序中的各种资源，如模型、纹理、字体、音频等。它继承自 <code>EventEmitter</code> 类，并使用多种加载器（如 <code>GLTFLoader</code>、<code>OBJLoader</code>、<code>TextureLoader</code> 等）来处理不同类型的资源。该类还支持自定义加载进度条(<code>Loading</code>)，并在所有资源加载完成后触发 <code>ready</code> 事件。</p><h3 id="构造函数-constructor" tabindex="-1">构造函数（Constructor） <a class="header-anchor" href="#构造函数-constructor" aria-label="Permalink to &quot;构造函数（Constructor）&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sources: SourcesItems[], loadingManager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoadingType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.LoadingManager)</span></span></code></pre></div><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><strong>sources</strong> (<code>SourcesItems[]</code>): 要加载的资源列表。</li><li><strong>loadingManager</strong> (<code>LoadingType | THREE.LoadingManager</code>, 可选): 自定义加载管理器或加载样式，默认为 <code>undefined</code>。</li></ul><h3 id="方法-methods" tabindex="-1">方法（Methods） <a class="header-anchor" href="#方法-methods" aria-label="Permalink to &quot;方法（Methods）&quot;">​</a></h3><h4 id="get-getloaded-boolean" tabindex="-1"><code>get getLoaded(): boolean</code> <a class="header-anchor" href="#get-getloaded-boolean" aria-label="Permalink to &quot;\`get getLoaded(): boolean\`&quot;">​</a></h4><p><strong>返回值</strong></p><ul><li><strong>getLoaded</strong> (<code>boolean</code>): 所有资源是否已加载完成。</li></ul><p><strong>功能</strong></p><ul><li>返回 <code>loaded</code> 是否等于 <code>toLoad</code>。</li></ul><h4 id="get-getprogress-number" tabindex="-1"><code>get getProgress(): number</code> <a class="header-anchor" href="#get-getprogress-number" aria-label="Permalink to &quot;\`get getProgress(): number\`&quot;">​</a></h4><p><strong>返回值</strong></p><ul><li><strong>getProgress</strong> (<code>number</code>): 加载进度，范围为 <code>[0, 1]</code>。</li></ul><p><strong>功能</strong></p><ul><li>计算并返回当前加载进度。</li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;three-auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> THREE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThreeAuto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;svg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TEXTURE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./ThreeJs.svg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  show: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span></code></pre></div><h2 id="加载器-loading" tabindex="-1">加载器（Loading） <a class="header-anchor" href="#加载器-loading" aria-label="Permalink to &quot;加载器（Loading）&quot;">​</a></h2><p><code>CustomLoading</code> 类用于在 Three.js 应用程序中创建和管理自定义加载进度条。它依赖于 <code>THREE.LoadingManager</code> 来处理资源加载，并使用 GSAP 来实现平滑的动画效果。该类还支持多种加载样式，并可以通过配置来选择不同的加载样式。</p><h3 id="构造函数-constructor-1" tabindex="-1">构造函数（Constructor） <a class="header-anchor" href="#构造函数-constructor-1" aria-label="Permalink to &quot;构造函数（Constructor）&quot;">​</a></h3><p><strong><code>CustomLoading(type: LoadingType)</code></strong></p><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><strong>type</strong> (<code>LoadingType</code>): 加载样式的类型，默认为 <code>&quot;default&quot;</code>。</li></ul><p><strong>功能</strong></p><ul><li>调用 <code>createBar</code> 方法根据提供的类型创建加载进度条。</li><li>初始化 DOM 元素。</li><li>创建 <code>THREE.LoadingManager</code> 实例，并绑定加载完成和进度更新的回调函数。</li><li>设置一个超时函数，在 30 秒后自动调用 <code>loadedBar</code> 方法。</li></ul><h3 id="方法-methods-1" tabindex="-1">方法（Methods） <a class="header-anchor" href="#方法-methods-1" aria-label="Permalink to &quot;方法（Methods）&quot;">​</a></h3><h4 id="createbar-type" tabindex="-1">createBar(type) <a class="header-anchor" href="#createbar-type" aria-label="Permalink to &quot;createBar(type)&quot;">​</a></h4><ul><li><strong>type</strong> (<code>LoadingType</code>): 加载样式的类型，默认为 <code>&quot;default&quot;</code>。</li></ul><p>使用 <code>htmlRender</code> 方法将加载节点渲染到 <code>document.body</code> 中。</p><h4 id="loadedbar" tabindex="-1">loadedBar() <a class="header-anchor" href="#loadedbar" aria-label="Permalink to &quot;loadedBar()&quot;">​</a></h4><p>当所有资源加载完成后调用。使用 GSAP 设置加载进度条的淡出动画，并在动画完成后移除加载进度条。设置加载进度条的缩放动画。</p><h4 id="progressbar-type-loaded-total" tabindex="-1">progressBar(type, loaded, total) <a class="header-anchor" href="#progressbar-type-loaded-total" aria-label="Permalink to &quot;progressBar(type, loaded, total)&quot;">​</a></h4><ul><li><strong>type</strong> (<code>LoadingType</code>): 加载样式的类型，默认为 <code>&quot;default&quot;</code>。</li><li><strong>loaded</strong> (<code>number</code>): 已加载的资源数量。</li><li><strong>total</strong> (<code>number</code>): 总资源数量。</li></ul><p>计算加载进度。更新加载进度条的百分比文本。如果加载样式为 <code>&quot;default&quot;</code>，则更新加载进度条的缩放比例。</p><h4 id="dispose" tabindex="-1"><code>dispose()</code> <a class="header-anchor" href="#dispose" aria-label="Permalink to &quot;\`dispose()\`&quot;">​</a></h4><p>移除现有的加载进度条 DOM 元素。</p><h3 id="使用示例-1" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例-1" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;three-auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThreeAuto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;circle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,43)]))}const g=a(n,[["render",o]]);export{c as __pageData,g as default};
