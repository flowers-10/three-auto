import{_ as o,c as r,a1 as c,o as a}from"./chunks/framework.DiRI4YF-.js";const h=JSON.parse('{"title":"Resource","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"config/resource.md","filePath":"zh/config/resource.md","lastUpdated":1744684722000}'),t={name:"config/resource.md"};function d(s,e,i,l,u,p){return a(),r("div",null,e[0]||(e[0]=[c('<h1 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;Resource&quot;">​</a></h1><p><code>array</code></p><p>资源管理组件。用于管理和描述多种类型的资源，如纹理、模型、音频等，以便在项目中动态加载和使用。</p><h2 id="resource-name" tabindex="-1">resource-name <a class="header-anchor" href="#resource-name" aria-label="Permalink to &quot;resource-name&quot;">​</a></h2><p><code>string</code></p><p>资源的名称，用于唯一标识该资源。例如 <code>&quot;brick_texture&quot;</code>、<code>&quot;car_model&quot;</code> 等。</p><h2 id="resource-type" tabindex="-1">resource-type <a class="header-anchor" href="#resource-type" aria-label="Permalink to &quot;resource-type&quot;">​</a></h2><p><code>string</code></p><p>资源的类型，确定该资源的分类。内部会通过传入的 <code>type</code> 选择对应的加载器。</p><p><strong>可选</strong></p><ul><li><code>TEXTURE</code> 图片材质</li><li><code>CUBE_TEXTURE</code> 图片材质</li><li><code>OBJ</code> obj文件材质</li><li><code>GLTF</code> glb文件材质</li><li><code>MP3</code> mp3文件材质</li><li><code>FONT</code> 字体包材质</li><li><code>HDR</code> 环境贴图材质</li></ul><h2 id="resource-path" tabindex="-1">resource-path <a class="header-anchor" href="#resource-path" aria-label="Permalink to &quot;resource-path&quot;">​</a></h2><p><code>string</code></p><p>资源文件的路径，表示该资源文件在项目中的存放位置或 <code>URL</code>。默认使用相对路径，请把资源放置到<code>public</code>文件夹下。</p><h2 id="resource-show" tabindex="-1">resource-show <a class="header-anchor" href="#resource-show" aria-label="Permalink to &quot;resource-show&quot;">​</a></h2><p><code>boolean</code></p><p>一个可选的布尔值，用于指示是否显示该资源。在某些情况下，你可能希望控制资源是否可见或是否已加载。默认值为 <code>true</code>（如果没有传递该值）。</p>',17)]))}const m=o(t,[["render",d]]);export{h as __pageData,m as default};
